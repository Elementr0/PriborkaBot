from aiogram import Router, F
from aiogram.types import CallbackQuery
from database.crud import get_day, get_subgroup
from inlineKeyboars.inline_Keyboard.schedule import schedule_menu

import datetime


router = Router()


@router.callback_query(F.data == "schedule_monday")
async def handle_tuesday_schedule(callback: CallbackQuery):
    try:
        date = datetime.date.today().isocalendar()[1] #–£–∑–Ω–∞—ë–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
        if (date % 2) == 0: #—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è –≤–µ—Ä–Ω—Ö—è—è –Ω–µ—á–µ—Ç–Ω–∞—è –Ω–∏–∂–Ω—è—è
            week = "up"
        else:
            week = "down"
        subgroup = await get_subgroup(callback.from_user.id)
        schedule = await get_day(week, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", subgroup)

        response_text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>\n\n"

        if not schedule:
            response_text += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            def time_to_minutes(time_str):
                try:
                    # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (8:00 –∏–∑ "8:00-9:35")
                    start_time = time_str.split('-')[0].strip()
                    hours, minutes = map(int, start_time.split(':'))
                    return hours * 60 + minutes
                except (IndexError, ValueError):
                    return 0  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Å—Ç–∞–≤–∏–º –≤ –Ω–∞—á–∞–ª–æ

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            sorted_schedule = sorted(schedule, key=lambda x: time_to_minutes(x.get('hour', '')))

            for i, lesson in enumerate(sorted_schedule, 1):
                hour = lesson.get('hour', '‚è∞ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                subject = lesson.get('subject', 'üìñ –ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
                classroom = lesson.get('classroom', 'üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                teacher = lesson.get('teacher', 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')

                response_text += (
                    f"‚è∞–í—Ä–µ–º—è: <b>{hour}</b>\n"
                    f"üìñ–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"üè´–ê—É–¥–∏—Ç–æ—Ä–∏—è: {classroom}\n"
                    f"üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å: {teacher}\n"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                if i < len(sorted_schedule):
                    response_text += "\n" + "‚îÄ" * 30 + "\n\n"

        await callback.message.edit_text(
            text=response_text,
            reply_markup=schedule_menu,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()