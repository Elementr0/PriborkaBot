from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from database.crud import get_day, get_subgroup
from inlineKeyboars.inline_Keyboard.schedule import schedule_menu
import datetime

router = Router()


def get_week_switch_keyboard(day: str, current_week: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å"""
    other_week = "down" if current_week == "up" else "up"
    week_text = "–ù–∏–∂–Ω—è—è –Ω–µ–¥–µ–ª—è" if other_week == "down" else "–í–µ—Ä—Ö–Ω—è—è –Ω–µ–¥–µ–ª—è"

    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üîÑ {week_text}",
                callback_data=f"schedule_{day}_{other_week}"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚Üê –ù–∞–∑–∞–¥ –∫ –¥–Ω—è–º",
                callback_data="back_to_schedule"
            )
        ]
    ])


def get_current_week():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    week_number = datetime.date.today().isocalendar()[1]
    return "up" if (week_number % 2) == 0 else "down"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
@router.callback_query(F.data == "schedule_monday")
async def handle_monday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "schedule_tuesday")
async def handle_tuesday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–í—Ç–æ—Ä–Ω–∏–∫", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "schedule_wednesday")
async def handle_wednesday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–°—Ä–µ–¥–∞", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "schedule_thursday")
async def handle_thursday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–ß–µ—Ç–≤–µ—Ä–≥", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "schedule_friday")
async def handle_friday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–ü—è—Ç–Ω–∏—Ü–∞", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "schedule_saturday")
async def handle_saturday_schedule(callback: CallbackQuery):
    try:
        current_week = get_current_week()
        await show_schedule(callback, "–°—É–±–±–æ—Ç–∞", current_week)
    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data.startswith("schedule_"))
async def handle_week_switch(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å"""
    try:
        data_parts = callback.data.split('_')
        if len(data_parts) >= 3:
            day_name = data_parts[1]  # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è (monday, tuesday –∏ —Ç.–¥.)
            week_type = data_parts[2]  # up –∏–ª–∏ down

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ä—É—Å—Å–∫–æ–µ
            days_map = {
                "monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "wednesday": "–°—Ä–µ–¥–∞",
                "thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "saturday": "–°—É–±–±–æ—Ç–∞"
            }

            russian_day = days_map.get(day_name, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
            await show_schedule(callback, russian_day, week_type)

    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()


@router.callback_query(F.data == "back_to_schedule")
async def back_to_schedule(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω–µ–π"""
    await callback.message.edit_text(
        text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=schedule_menu
    )
    await callback.answer()


async def show_schedule(callback: CallbackQuery, day: str, week: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        subgroup = await get_subgroup(callback.from_user.id)
        schedule = await get_day(week, day, subgroup)

        week_text = "–≤–µ—Ä—Ö–Ω—è—è" if week == "up" else "–Ω–∏–∂–Ω—è—è"
        response_text = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day.lower()} ({week_text} –Ω–µ–¥–µ–ª—è):</b>\n\n"

        if not schedule:
            response_text += "‚ùå –ó–∞–Ω—è—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            def time_to_minutes(time_str):
                try:
                    start_time = time_str.split('-')[0].strip()
                    hours, minutes = map(int, start_time.split(':'))
                    return hours * 60 + minutes
                except:
                    return 0

            sorted_schedule = sorted(schedule, key=lambda x: time_to_minutes(x.get('hour', '')))

            for i, lesson in enumerate(sorted_schedule, 1):
                hour = lesson.get('hour', '‚è∞ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                subject = lesson.get('subject', 'üìñ –ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')
                classroom = lesson.get('classroom', 'üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                teacher = lesson.get('teacher', 'üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω')

                response_text += (
                    f"‚è∞–í—Ä–µ–º—è: <b>{hour}</b>\n"
                    f"üìñ–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                    f"üè´–ê—É–¥–∏—Ç–æ—Ä–∏—è: {classroom}\n"
                    f"üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å: {teacher}\n"
                )

                if i < len(sorted_schedule):
                    response_text += "\n" + "‚îÄ" * 30 + "\n\n"

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –¥–ª—è callback_data
        eng_days_map = {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "monday",
            "–í—Ç–æ—Ä–Ω–∏–∫": "tuesday",
            "–°—Ä–µ–¥–∞": "wednesday",
            "–ß–µ—Ç–≤–µ—Ä–≥": "thursday",
            "–ü—è—Ç–Ω–∏—Ü–∞": "friday",
            "–°—É–±–±–æ—Ç–∞": "saturday"
        }

        eng_day = eng_days_map.get(day, "monday")
        keyboard = get_week_switch_keyboard(eng_day, week)

        await callback.message.edit_text(
            text=response_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        await callback.answer()